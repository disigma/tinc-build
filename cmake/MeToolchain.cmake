cmake_minimum_required(VERSION 3.0)

include(${CMAKE_CURRENT_LIST_DIR}/MeWimal.cmake)

if(NOT WIMAL_TARGET)
  set(WIMAL_TARGET x64-linux)
  if(CMAKE_HOST_SYSTEM_NAME STREQUAL Darwin)
    set(WIMAL_TARGET x64-macos)
  endif()
endif()

set(
  CMAKE_C_COMPILER ${WIMAL_HOME}/bin/${WIMAL_TARGET}-cc #
  CACHE PATH CMAKE_C_COMPILER
)
set(
  CMAKE_CXX_COMPILER ${WIMAL_HOME}/bin/${WIMAL_TARGET}-c++ #
  CACHE PATH CMAKE_CXX_COMPILER
)

set(CMAKE_AR ${WIMAL_HOME}/bin/${WIMAL_TARGET}-ar CACHE PATH CMAKE_AR)
set(CMAKE_NM ${WIMAL_HOME}/bin/${WIMAL_TARGET}-nm CACHE PATH CMAKE_NM)
set(
  CMAKE_RANLIB ${WIMAL_HOME}/bin/${WIMAL_TARGET}-ranlib #
  CACHE PATH CMAKE_RANLIB
)
set(
  CMAKE_OBJCOPY ${WIMAL_HOME}/bin/${WIMAL_TARGET}-objcopy #
  CACHE PATH CMAKE_OBJCOPY
)
set(
  CMAKE_OBJDUMP ${WIMAL_HOME}/bin/${WIMAL_TARGET}-objdump #
  CACHE PATH CMAKE_OBJDUMP
)
set(
  CMAKE_STRIP ${WIMAL_HOME}/bin/${WIMAL_TARGET}-strip #
  CACHE PATH CMAKE_STRIP
)
set(
  CMAKE_DSYMUTIL ${WIMAL_HOME}/bin/${WIMAL_TARGET}-dsymutil #
  CACHE PATH CMAKE_DSYMUTIL
)
set(
  CMAKE_INSTALL_NAME_TOOL ${WIMAL_HOME}/bin/${WIMAL_TARGET}-install_name_tool #
  CACHE PATH CMAKE_INSTALL_NAME_TOOL
)
set(CMAKE_C_COMPILER_AR ${CMAKE_AR} CACHE PATH CMAKE_C_COMPILER_AR)
set(CMAKE_CXX_COMPILER_AR ${CMAKE_AR} CACHE PATH CMAKE_CXX_COMPILER_AR)
set(CMAKE_C_COMPILER_RANLIB ${CMAKE_RANLIB} CACHE PATH CMAKE_C_COMPILER_RANLIB)
set(
  CMAKE_CXX_COMPILER_RANLIB ${CMAKE_RANLIB} #
  CACHE PATH CMAKE_CXX_COMPILER_RANLIB
)
set(CMAKE_CROSSCOMPILING ON CACHE BOOL CMAKE_CROSSCOMPILING)

if(WIMAL_TARGET MATCHES -macos OR WIMAL_TARGET MATCHES -ios)
  set(CMAKE_SYSTEM_NAME Darwin CACHE STRING CMAKE_SYSTEM_NAME)
else()
  set(CMAKE_SYSTEM_NAME Linux CACHE STRING CMAKE_SYSTEM_NAME)
endif()

set(ME_SYSROOT ${WIMAL_HOME}/sysroot/${WIMAL_TARGET} CACHE PATH ME_SYSROOT)
set(CMAKE_OSX_SYSROOT ${ME_SYSROOT} CACHE PATH CMAKE_OSX_SYSROOT)
set(CMAKE_FIND_ROOT_PATH ${ME_SYSROOT} CACHE PATH CMAKE_FIND_ROOT_PATH)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug)
endif()

# https://github.com/ninja-build/ninja/wiki/FAQ
set(
  CMAKE_C_FLAGS "${EXTRA_CFLAGS} -fcolor-diagnostics -fPIC -pipe"
  CACHE STRING CMAKE_C_FLAGS
)
set(
  CMAKE_C_FLAGS_DEBUG "-O0 -g -fstandalone-debug -fno-limit-debug-info"
  CACHE STRING CMAKE_C_FLAGS_DEBUG
)
set(CMAKE_C_FLAGS_RELEASE "-Ofast -DNDEBUG" CACHE STRING CMAKE_C_FLAGS_RELEASE)
set(
  CMAKE_C_FLAGS_RELWITHDEBINFO "-Ofast -g -DNDEBUG"
  CACHE STRING CMAKE_C_FLAGS_RELWITHDEBINFO
)
set(
  CMAKE_C_FLAGS_MINSIZEREL "-Os -DNDEBUG" #
  CACHE STRING CMAKE_C_FLAGS_MINSIZEREL
)

set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS}" CACHE STRING CMAKE_CXX_FLAGS)
set(
  CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}" #
  CACHE STRING CMAKE_CXX_FLAGS_DEBUG
)
set(
  CMAKE_CXX_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE}
  CACHE STRING CMAKE_CXX_FLAGS_RELEASE
)
set(
  CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_C_FLAGS_RELWITHDEBINFO}
  CACHE STRING CMAKE_CXX_FLAGS_RELWITHDEBINFO
)
set(
  CMAKE_CXX_FLAGS_MINSIZEREL ${CMAKE_C_FLAGS_MINSIZEREL} #
  CACHE STRING CMAKE_C_FLAGS
)

if(WIMAL_TARGET MATCHES -android)
  set(CMAKE_EXE_LINKER_FLAGS -pie)
endif()

# Suppress warnings
set(CMAKE_POLICY_DEFAULT_CMP0068 NEW CACHE STRING CMAKE_POLICY_DEFAULT_CMP0068)
set(CMAKE_POLICY_DEFAULT_CMP0069 NEW CACHE STRING CMAKE_POLICY_DEFAULT_CMP0069)
if(NOT WIMAL_TARGET MATCHES -ios AND NOT WIMAL_TARGET MATCHES -macos)
  set(
    CMAKE_INTERPROCEDURAL_OPTIMIZATION ON #
    CACHE BOOL CMAKE_INTERPROCEDURAL_OPTIMIZATION
  )
endif()
